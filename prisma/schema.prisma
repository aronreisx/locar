generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  created_at  DateTime @default(now())
  cars        Car[]

  @@map("categories")
}

model Specification {
  id          String               @id @default(uuid())
  name        String
  description String
  created_at  DateTime             @default(now())
  cars        CarsSpecifications[]

  @@map("specifications")
}

model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  password       String
  driver_license String
  avatar         String       @default("")
  admin          Boolean      @default(false)
  created_at     DateTime     @default(now())
  rental         Rental[]
  UserToken      UserTokens[]

  @@map("users")
}

model Car {
  id             String               @id @default(uuid())
  name           String
  description    String
  daily_rate     Int
  available      Boolean              @default(true)
  license_plate  String
  fine_amount    Int
  brand          String
  category_id    String
  created_at     DateTime             @default(now())
  category       Category?            @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specifications CarsSpecifications[]
  images         CarImages[]
  rental         Rental[]

  @@map("cars")
}

model CarsSpecifications {
  id               String         @id @default(uuid())
  specification_id String
  car_id           String
  created_at       DateTime       @default(now())
  specification    Specification? @relation(fields: [specification_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  car              Car?           @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("cars_specifications")
}

model CarImages {
  id         String   @id @default(uuid())
  name       String
  car_id     String
  created_at DateTime @default(now())
  car        Car?     @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("car_images")
}

model Rental {
  id                   String    @id @default(uuid())
  car_id               String
  user_id              String
  start_date           DateTime
  end_date             DateTime?
  expected_return_date DateTime
  total                Int?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())
  car                  Car?      @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                 User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("rentals")
}

model UserTokens {
  id            String   @id @default(uuid())
  user_id       String
  refresh_token String
  expiring_date DateTime
  created_at    DateTime @default(now())
  user          User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_tokens")
}
